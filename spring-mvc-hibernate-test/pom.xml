<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.workspace.spring</groupId>
  <artifactId>spring-mvc-hibernate-test</artifactId>
  <packaging>war</packaging>
  <version>0.0.1-SNAPSHOT</version>
  <name>spring_mvc Maven Webapp</name>
  <url>http://maven.apache.org</url>
  <!-- SLF4J(Simple logging Facade for Java)不是一个真正的日志实现，而是一个抽象层（ abstraction layer），它允许你在后台使用任意一个日志类库。
  	slf4j是日志的接口（只定义了一些方法而没有去实现），和commons-logging一样。而log4j是具体的实现（即怎么来打印日志等），和logback是一样的。
  	SLF4J对比Log4J，logback和java.util.Logging有优势，可以避免对不必要类库的维护，具体看网络资源。 -->
  <!--<dependencyManagement>和</dependencies>类似于父类构造和子类的关系 ，子类可以继承父类也可以重写父类的方法 -->
  <!--apache的commons系列包，是一系列非常通用的公共组件包，Spring,Hibernate等众多第三方框架都依赖于这些基础的组件包，而commons-lang则是基础中的基础，是这系列基础包中的基础包。  -->
  <!--spring-web包包含Servlet和Portlet所需要通用组件，spring-webmvc则在Servlet环境中启用MVC支持。
  	由于spring-webmvc依赖于spring-web，所以定义了spring-webmvc依赖后，可以不用显示的在pom定义spring-web。-->
  <!--aspectj 面向切面编程AOP -->
  <!-- 是一个强大的，高性能，高质量的Code生成类库，它可以在运行期扩展Java类与实现Java接口。
    Hibernate用它来实现PO(Persistent Object 持久化对象)字节码的动态生成 -->
  <!--C3P0是一个开源的JDBC连接池，它实现了数据源和JNDI绑定，支持JDBC3规范和JDBC2的标准扩展。目前使用它的开源项目有Hibernate，Spring等。  -->
  <!--DBCP主流数据库连接池之一(DBCP、c3p0、proxool)，单独使用DBCP需要使用commons-dbpc.jar、commons-collections.jar、commons-pool.jar三个包，
             都可以在Apache组织的网站上下到(commons.apache.org)，可以在spring中配置  -->
  <!--plugins插件，实现更多的功能  -->
  <!-- properties-->
  <properties>
  	<junit.version>4.7</junit.version>
  	<javax.servlet.version>3.0.1</javax.servlet.version>
  	<commons-lang.version>2.1</commons-lang.version>
  	<slf4j.version>1.7.14</slf4j.version>
  	<springframework.version>4.1.3.RELEASE</springframework.version>
  	<jstl.version>1.2</jstl.version>
  	<taglibs.version>1.1.2</taglibs.version>
  	<aspectj.version>1.7.3</aspectj.version>
  	<hibernate.version>5.4.24.Final</hibernate.version>
  	<joda-time.version>2.3</joda-time.version>
  	<mysql.connector.version>5.1.31</mysql.connector.version>
  	<javaee.version>8</javaee.version>
  </properties>
  <!--dependencyManagement-->  
  <dependencyManagement>
  	<dependencies>
  		<dependency>
  			<groupId>org.springframework</groupId>
  			<artifactId>spring-framework-bom</artifactId>
  			<version>${springframework.version}</version>
  			<type>pom</type>
  			<scope>import</scope>
  		</dependency>
  	</dependencies>
  </dependencyManagement>
  <dependencies>	
  	<dependency> 			
  		<groupId>junit</groupId>
        <artifactId>junit</artifactId>
        <version>${junit.version}</version>
        <scope>test</scope>
  	</dependency>
  	<dependency>
  		<groupId>javax.servlet</groupId>
  		<artifactId>javax.servlet-api</artifactId>
  		<version>${javax.servlet.version}</version>
  		<!--只在编译和测试时运行  -->
  		<scope>provided</scope>
  	</dependency>
  	<dependency>
        <groupId>javax.servlet.jsp</groupId>
        <artifactId>javax.servlet.jsp-api</artifactId>
        <version>2.3.1</version>
        <scope>provided</scope>
    </dependency>
  	<dependency>
  		<groupId>jstl</groupId>
        <artifactId>jstl</artifactId>
        <version>${jstl.version}</version>
    </dependency>
    <dependency>
  		<groupId>commons-lang</groupId>
  		<artifactId>commons-lang</artifactId>
  		<version>${commons-lang.version}</version>
  	</dependency>
  	<dependency>
  		<groupId>org.slf4j</groupId>
  		<artifactId>slf4j-log4j12</artifactId>
  		<version>${slf4j.version}</version>
  		<exclusions>
  			<exclusion>
  				<groupId>org.slf4j</groupId>
  				<artifactId>slf4j-api</artifactId>
  			</exclusion>
  		</exclusions>
  	</dependency>
    <dependency>
        <groupId>taglibs</groupId>
        <artifactId>standard</artifactId>
        <version>${taglibs.version}</version>
    </dependency>
    <dependency>
  		<groupId>org.springframework</groupId>
  		<artifactId>spring-web</artifactId>
  	</dependency>
  	<dependency>
  		<groupId>org.springframework</groupId>
  		<artifactId>spring-webmvc</artifactId>
  	</dependency>
  	<dependency>
  		<groupId>org.springframework</groupId>
        <artifactId>spring-aspects</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-orm</artifactId>
    </dependency>
    <dependency>
        <groupId>org.hibernate</groupId>
        <artifactId>hibernate-core</artifactId>
        <version>${hibernate.version}</version>
    </dependency>
    <dependency>
        <groupId>commons-pool</groupId>
        <artifactId>commons-pool</artifactId>
        <version>1.6</version>
    </dependency>
    <dependency>
        <groupId>c3p0</groupId>
        <artifactId>c3p0</artifactId>
        <version>0.9.1</version>
    </dependency>
    <dependency>
        <groupId>cglib</groupId>
        <artifactId>cglib</artifactId>
        <version>2.2.2</version>
    </dependency>
    <dependency>
        <groupId>commons-dbcp</groupId>
        <artifactId>commons-dbcp</artifactId>
        <version>1.4</version>
    </dependency>
    <!-- MySQL -->
    <dependency>
    	<groupId>mysql</groupId>
        <artifactId>mysql-connector-java</artifactId>
        <version>${mysql.connector.version}</version>
    </dependency>
    <!-- Joda-Time -->
    <dependency>
    	<!--Joda Time，一个面向 Java™ 平台的易于使用的开源时间/日期库  -->
        <groupId>joda-time</groupId>
        <artifactId>joda-time</artifactId>
        <version>${joda-time.version}</version>
    </dependency>
    <!-- To map JodaTime with database type -->
    <dependency>
    	<!--usertype-core is included to provide the mapping between database date-type and joda-time LocalDate.  -->
        <groupId>org.jadira.usertype</groupId>
        <artifactId>usertype.core</artifactId>
        <version>3.0.0.CR1</version>
    </dependency>
  </dependencies>
  <!--Build-->
  <build>
  	<plugins>
  		<plugin>
  			<groupId>org.eclipse.jetty</groupId>
  			<artifactId>jetty-maven-plugin</artifactId>
  			<version>9.2.2.v20140723</version>
  		</plugin>
  		<plugin>
  			<groupId>org.apache.maven.plugins</groupId>
			<artifactId>maven-compiler-plugin</artifactId>
			<!-- Maven > Update project的时候JDK版本都恢复成1.5。 
			原因： 这是Maven已知的一个特性。除非在你的POM文件中显示的指定一个版本，否则会使用编译器默认的source/target版本1.5。主要还是在于Eclipse中Maven的集成方式起到了关键作用, 它会从POM文件中生成项目的.project,.classpath以及.settings, 因此除非POM文件指定了正确的JDK版本, 否则你每次更新项目配置的时候它都会重置到1.5版本。
			解决办法： 在项目的pom.xml文件中增加如下配置: 
			 -->
			<version>3.1</version>		
			<configuration>
				<source>1.8</source><!-- 源代码使用的开发版本 -->
				<target>1.8</target> <!-- 需要生成的目标class文件的编译版本 -->
				<!-- 一般而言，target与source是保持一致的，但是，有时候为了让程序能在其他版本的jdk中运行(对于低版本目标jdk，源代码中需要没有使用低版本jdk中不支持的语法)，会存在target不同于source的情况 -->
				<!--windows默认使用GBK编码，java项目经常编码为utf8，也需要在compiler插件中指出，否则中文乱码可能会出现编译错误-->
				<encoding>UTF8</encoding> 
			</configuration>
		</plugin>  		
  	</plugins>
  	 <finalName>spring-mvc-hibernate</finalName>
  </build>
<!-- 技巧：上面的方法每次都要去生成的工程中去修改pom，项目多的话修改起来很麻烦，这里有个一劳永逸的办法，修改eclipse 创建maven项目设置默认jdk版本：
只需要在maven的setting.xml文件中 的 profiles 节点 加入如下代码片段： -->
<!-- <profile>  
    	<id>jdk17</id>  
     	<activation>  
          	<activeByDefault>true</activeByDefault>  
          	<jdk>1.7</jdk>  
    	</activation>  
     	<properties>  
          	<maven.compiler.source>1.7</maven.compiler.source>  
          	<maven.compiler.target>1.7</maven.compiler.target>  
          	<maven.compiler.compilerVersion>1.7</maven.compiler.compilerVersion>  
     	</properties>   
	</profile>   -->
</project>
