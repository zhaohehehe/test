<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:mvc="http://www.springframework.org/schema/mvc" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" 
    xmlns:aop="http://www.springframework.org/schema/aop" 
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd">
	<import resource="applicationContext-properties.xml"/>
	<!-- 第一种方式 -->
	<!-- <context:annotation-config />只能激活已经注册过的bean的注解 
	<bean id="userServiceImpl" class="test1.UserServiceImpl"></bean>
	<bean id="userDaoImpl" class="test1.UserDaoImpl"></bean> -->
	<!-- 第二种方式 -->
	<context:component-scan base-package="test1" />
	
	<!-- jdbc数据源 -->
	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
				<prop key="hiberante.format_sql">true</prop>
				<prop key="hibernate.connection.autocommit">true</prop>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
			</props>
		</property>
		<property name="mappingResources">
			<list>
				<value>test1/User.hbm.xml</value>
			</list>
		</property>
	</bean>
	<!-- 第一种配置事务的方式 ，tx -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="*get" read-only="true"/>
			<tx:method name="*"/>
		</tx:attributes>
	</tx:advice>
	<!-- proxy-target-class="true"表示使用CGLib动态代理技术 -->
	<aop:aspectj-autoproxy proxy-target-class="true" />
	<aop:config>
		<aop:pointcut id="txPointcut" expression="execution(* test1.*.*(..))"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut" />
	</aop:config>
	<!-- 第二种配置事务的方式 ，代理 -->
    <!-- <bean id="transactionBese" class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean" lazy-init="true" abstract="true">  
        <property name="transactionManager" ref="transactionManager"></property>  
        <property name="transactionAttributes">  
            <props>  
                <prop key="add*">PROPAGATION_REQUIRED</prop>  
                <prop key="update*">PROPAGATION_REQUIRED,-Exception</prop>  
                <prop key="insert*">PROPAGATION_REQUIRED,-Exception</prop>  
                <prop key="modify*">PROPAGATION_REQUIRED,-Exception</prop>  
                <prop key="delete*">PROPAGATION_REQUIRED,-Exception</prop>  
                <prop key="get*">PROPAGATION_NEVER</prop>  
                <prop key="*">PROPAGATION_REQUIRED, readOnly</prop>
            </props>  
        </property>  
    </bean> -->
	<!--使用注解@Transactional(on serviceImpl)，作用等同于上面的tx配置 -->
	<!-- <tx:annotation-driven transaction-manager="txManager"/> --><!-- a PlatformTransactionManager is still required -->
	<!-- 事物管理配置方法一 -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate5.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	<!-- 事物管理配置方法二 -->
	<!--  <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean> -->
</beans>